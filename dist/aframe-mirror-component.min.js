!function(b){var c={};function a(d){if(c[d])return c[d].exports;var e=c[d]={exports:{},id:d,loaded:!1};return b[d].call(e.exports,e,e.exports,a),e.loaded=!0,e.exports}a.m=b,a.c=c,a.p="",a(0)}([function(a,b){if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");AFRAME.registerComponent("mirror",{schema:{resolution:{type:"number",default:128},refraction:{type:"number",default:.95},color:{type:"color",default:16777215},distance:{type:"number",default:3e3},interval:{type:"number",default:1e3},repeat:{type:"boolean",default:!1}},multiple:!1,init:function(){this.counter=this.data.interval;let a=new THREE.WebGLCubeRenderTarget(this.data.resolution,{format:THREE.RGBFormat,generateMipmaps:!0,minFilter:THREE.LinearMipmapLinearFilter});this.cam=new THREE.CubeCamera(.5,this.data.distance,a),this.el.object3D.add(this.cam),this.mirrorMaterial=new THREE.MeshBasicMaterial({color:this.data.color,refractionRatio:this.data.refraction,envMap:this.cam.renderTarget.texture}),this.done=!1;var b=this.mirrorMaterial;this.mesh=this.el.getObject3D("mesh"),this.mesh&&this.mesh.traverse(function(a){a instanceof THREE.Mesh&&(a.material=b)})},tick:function(c,b){if(!this.done){if(this.counter>0)this.counter-=b;else if(this.mesh=this.el.getObject3D("mesh"),this.mesh){this.mesh.visible=!1,AFRAME.scenes[0].renderer.autoClear=!0;var a=new THREE.Vector3;this.el.object3D.getWorldPosition(a),this.cam.position.copy(this.el.object3D.worldToLocal(a)),this.cam.updateCubeMap(AFRAME.scenes[0].renderer,this.el.sceneEl.object3D);var d=this.mirrorMaterial;this.mesh.traverse(function(a){a instanceof THREE.Mesh&&(a.material=d)}),this.mesh.visible=!0,this.data.repeat||(this.done=!0,this.counter=this.data.interval)}}},update:function(a){},remove:function(){},pause:function(){},play:function(){}})}])
